# HG changeset patch
# User Jonathan Hanke <jonhanke@gmail.com>
# Date 1242387616 25200
# Node ID 5f887515ed65d071b4120088339ae40e657b0a7e
# Parent  12d1fb4068effe1cd9d790a740a6a1841e0a323a
Added more doctests to bring QuadraticForm coverage to 100%.

diff -r 12d1fb4068ef -r 5f887515ed65 sage/quadratic_forms/quadratic_form.py
--- a/sage/quadratic_forms/quadratic_form.py	Thu May 14 21:06:06 2009 -0700
+++ b/sage/quadratic_forms/quadratic_form.py	Fri May 15 04:40:16 2009 -0700
@@ -213,8 +213,7 @@
     ## Routines to compute local masses for ZZ.
     from sage.quadratic_forms.quadratic_form__mass import \
             shimura_mass__maximal, \
-            hanke_mass__maximal, \
-            GHY_mass_maximal
+            GHY_mass__maximal
     from sage.quadratic_forms.quadratic_form__mass__Siegel_densities import \
             mass__by_Siegel_densities, \
             Pall_mass_density_at_odd_prime, \
@@ -234,9 +233,9 @@
             conway_p_mass, \
             conway_standard_p_mass, \
             conway_standard_mass, \
-            conway_mass, \
-            conway_generic_mass, \
-            conway_p_mass_adjustment
+            conway_mass
+#            conway_generic_mass, \
+#            conway_p_mass_adjustment
 
     ## Routines to check local representability of numbers
     from sage.quadratic_forms.quadratic_form__local_representation_conditions import \
diff -r 12d1fb4068ef -r 5f887515ed65 sage/quadratic_forms/quadratic_form__local_representation_conditions.py
--- a/sage/quadratic_forms/quadratic_form__local_representation_conditions.py	Thu May 14 21:06:06 2009 -0700
+++ b/sage/quadratic_forms/quadratic_form__local_representation_conditions.py	Fri May 15 04:40:16 2009 -0700
@@ -856,7 +856,12 @@
         True
         sage: Q.is_locally_represented_number_at_place(7, 5)
         True
+        sage: Q.is_locally_represented_number_at_place(-1, infinity)
+        False
+        sage: Q.is_locally_represented_number_at_place(-1, 2)
+        False
 
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1,1,-1])
         sage: Q.is_locally_represented_number_at_place(7, infinity)
         True
         sage: Q.is_locally_represented_number_at_place(7, 2)
@@ -866,16 +871,6 @@
         sage: Q.is_locally_represented_number_at_place(7, 5)
         True
 
-
-        sage: Q.is_locally_represented_number_at_place(-1, infinity)
-        False
-        sage: Q.is_locally_represented_number_at_place(-1, 2)
-        False
-        sage: Q.is_locally_represented_number_at_place(7, 3)
-        True
-        sage: Q.is_locally_represented_number_at_place(7, 5)
-        True
-
     """
     self.local_representation_conditions(silent_flag=True)
     return self.__local_representability_conditions.is_locally_represented_at_place(m, p)
@@ -893,7 +888,7 @@
         boolean
 
     EXAMPLES:
-        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1,1])
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
         sage: Q.is_locally_represented_number(2)
         True
         sage: Q.is_locally_represented_number(7)
diff -r 12d1fb4068ef -r 5f887515ed65 sage/quadratic_forms/quadratic_form__mass.py
--- a/sage/quadratic_forms/quadratic_form__mass.py	Thu May 14 21:06:06 2009 -0700
+++ b/sage/quadratic_forms/quadratic_form__mass.py	Fri May 15 04:40:16 2009 -0700
@@ -23,36 +23,50 @@
         conway_p_mass, \
         conway_standard_p_mass, \
         conway_standard_mass, \
-        conway_mass, \
-        conway_generic_mass, \
-        conway_p_mass_adjustment
+        conway_mass
+#        conway_generic_mass, \
+#        conway_p_mass_adjustment
 
 ###################################################
 
 
-def shimura_mass__maximal(self, p):
+def shimura_mass__maximal(self,):
     """
     Use Shimuras exact mass formula to compute the mass of a maximal
     quadratic lattice. This works for any totally real number field,
     but has a small technical restriction when n is odd.
+
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number
+
+    EXAMPLE:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
+        sage: Q.shimura_mass__maximal()
+
     """
     pass
 
 
-def hanke_mass__maximal(self, p):
-    """
-    Use Shimuras exact mass formula to compute the mass of a maximal 
-    quadratic lattice.  This works for any totally real number field, 
-    but has a small technical restriction when n is odd.
-    """
-    pass
 
-
-def GHY_mass_maximal(self, p):
+def GHY_mass__maximal(self):
     """
     Use the GHY formula to compute the mass of a (maximal?) quadratic
     lattice. This works for any number field.
 
-    See [GHY, Prop 7.4 and 7.5, p121] and [GY, Thrm 10.20, p25].
+    Reference:  See [GHY, Prop 7.4 and 7.5, p121] and [GY, Thrm 10.20, p25].
+
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number
+
+    EXAMPLE:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
+        sage: Q.GHY_mass__maximal()
+
     """
     pass
diff -r 12d1fb4068ef -r 5f887515ed65 sage/quadratic_forms/quadratic_form__mass__Conway_Sloane_masses.py
--- a/sage/quadratic_forms/quadratic_form__mass__Conway_Sloane_masses.py	Thu May 14 21:06:06 2009 -0700
+++ b/sage/quadratic_forms/quadratic_form__mass__Conway_Sloane_masses.py	Fri May 15 04:40:16 2009 -0700
@@ -7,6 +7,8 @@
 from sage.quadratic_forms.special_values import gamma__exact, zeta__exact, quadratic_L_function__exact
 from sage.calculus.calculus import floor
 
+
+
 def parity(self, allow_rescaling_flag=True):
     """
     Returns the parity ("even" or "odd") of an integer-valued quadratic
@@ -157,6 +159,18 @@
 
     OUTPUT:
         a list of integers
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,10))     
+        sage: Q.conway_species_list_at_odd_prime(3)
+        [6, 2, 1]
+
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,8))
+        sage: Q.conway_species_list_at_odd_prime(3)
+        [5, 2]
+        sage: Q.conway_species_list_at_odd_prime(5)
+        [-6, 1]
+
     """
     ## Sanity Check:
     if not ((p>2) and is_prime(p)):
@@ -192,6 +206,7 @@
     return species_list
 
 
+
 def conway_species_list_at_2(self):
     """
     Returns an integer called the 'species' which determines the type
@@ -209,6 +224,14 @@
         a list of integers
 
     EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,10))     
+        sage: Q.conway_species_list_at_2()
+        [1, 5, 1, 1, 1, 1]
+
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,8))
+        sage: Q.conway_species_list_at_2()
+        [1, 3, 1, 1, 1]
+
     """
     ## Some useful variables
     n = self.dim()
@@ -277,9 +300,23 @@
     unimodular blocks of size <= 2 and the 1x1 blocks are all in the upper
     leftmost position.
 
+    INPUT:
+        none
+
     OUTPUT:
         an integer 0 <= x <= 7
 
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,3,5,7])    
+        sage: Q.conway_octane_of_this_unimodular_Jordan_block_at_2()
+        0
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,5,13])    
+        sage: Q.conway_octane_of_this_unimodular_Jordan_block_at_2()
+        3
+        sage: Q = DiagonalQuadraticForm(ZZ, [3,7,13])    
+        sage: Q.conway_octane_of_this_unimodular_Jordan_block_at_2()
+        7
+
     """
     ## Deal with 'even' forms 
     if self.parity() == "even":
@@ -348,6 +385,18 @@
 def conway_diagonal_factor(self, p):
     """
     Computes the diagonal factor of Conway's p-mass.
+
+    INPUT:
+        p -- a prime number > 0
+
+    OUTPUT:
+        a rational number > 0
+
+    EXAMPLES:
+        sage:  sage: Q = DiagonalQuadraticForm(ZZ, range(1,6))    
+        sage: Q.conway_diagonal_factor(3)
+        81/256        
+
     """
      ## Get the species list at p
     if p == 2:
@@ -376,6 +425,28 @@
     """
     Computes twice the power of p which evalues the 'cross product'
     term in Conway's mass formula.
+
+    INPUT:
+        p -- a prime number > 0
+
+    OUTPUT:
+        a rational number 
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,8))
+        sage: Q.conway_cross_product_doubled_power(2)
+        18
+        sage: Q.conway_cross_product_doubled_power(3)
+        10
+        sage: Q.conway_cross_product_doubled_power(5)
+        6
+        sage: Q.conway_cross_product_doubled_power(7)
+        6
+        sage: Q.conway_cross_product_doubled_power(11)
+        0
+        sage: Q.conway_cross_product_doubled_power(13)
+        0
+
     """
     doubled_power = 0
     dim_list = [J.dim()  for J in self.jordan_blocks_in_unimodular_list_by_scale_power(p)]
@@ -390,6 +461,18 @@
 def conway_type_factor(self):
     """
     This is a special factor only present in the mass formula when p=2.
+
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number 
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1,8))
+        sage: Q.conway_type_factor()
+        4
+
     """
     jordan_list = self.jordan_blocks_in_unimodular_list_by_scale_power(2)
     n2 = sum([J.dim()  for J in jordan_list  if J.is_even()])
@@ -402,6 +485,20 @@
 def conway_p_mass(self, p):
     """
     Computes Conway's p-mass.
+
+    INPUT:
+        p -- a prime number > 0
+
+    OUTPUT:
+        a rational number > 0
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, range(1, 6))
+        sage: Q.conway_p_mass(2)
+        16/3
+        sage: Q.conway_p_mass(3)
+        729/256
+
     """
     ## Compute the first two factors of the p-mass
     p_mass = self.conway_diagonal_factor(p) * (p ** (self.conway_cross_product_doubled_power(p) / ZZ(2)))
@@ -419,6 +516,12 @@
     """
     Computes the standard (generic) Conway-Sloane p-mass.
 
+    INPUT:
+        p -- a prime number > 0
+
+    OUTPUT:
+        a rational number > 0
+
     EXAMPLES:
         sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
         sage: Q.conway_standard_p_mass(2)
@@ -448,6 +551,12 @@
     """
     Returns the infinite product of the standard mass factors.
 
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number > 0
+
     EXAMPLES:
         sage: Q = QuadraticForm(ZZ, 3, [2, -2, 0, 3, -5, 4])
         sage: Q.conway_standard_mass()
@@ -486,6 +595,12 @@
     """
     Compute the mass by using the Conway-Sloane mass formula.    
 
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number > 0
+
     EXAMPLES:
         sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
         sage: Q.conway_mass()
@@ -524,52 +639,52 @@
 
 
 
-def conway_generic_mass(self):
-    """ 
-    Computes the generic mass given as 
-         2 \pi^{-n(n+1)/4} \prod_{j=1}^{n} \Gamma\(\tfrac{j}{2}\)
-        \zeta(2) \cdots \zeta(2s-2) \zeta_{D}(s)
-    where $n = 2s$ or $2s-1$ depending on the parity of $n$, 
-    and $D = (-1)^{s} d$.  We interpret the symbol $\(\frac{D}{p}\)$ 
-    as 0 if $p\mid 2d$.
-    (Conway and Sloane, Mass formula paper, p??)
-
-    This is possibly equal to  
-        2^{-td} * \tau(G) *[\prod_{i=1}^{t} \zeta(1-2i) ]* L(1-t, \chi)
-    where $\dim(Q) = n = 2t$ or $2t+1$, and the last factor is omitted 
-    when $n$ is odd.
-    (GHY, Prop 7.4 and 7.5, p121)
-    """
-    RR = RealField(200)
-    n = self.dim()
-    if n % 2 == 0:
-        s = n / 2
-    else:
-        s = (n-1) / 2
-
-    ## Form the generic zeta product
-    ans = 2 * RR(pi)^(-n * (n+1) / 4)
-    for j in range(1,n+1):
-        ans *= gamma(RR(j/2))
-    for j in range(2, 2*s, 2):  ## j = 2, ..., 2s-2    
-        ans *= zeta(RR(j))
-
-    ## Extra L-factor for even dimensional forms  -- DO THIS!!!
-    raise NotImplementedError, "This routine is not finished yet... =("
-
-    ## Return the answer
-    return ans
+#def conway_generic_mass(self):
+#    """ 
+#    Computes the generic mass given as 
+#         2 \pi^{-n(n+1)/4} \prod_{j=1}^{n} \Gamma\(\tfrac{j}{2}\)
+#        \zeta(2) \cdots \zeta(2s-2) \zeta_{D}(s)
+#    where $n = 2s$ or $2s-1$ depending on the parity of $n$, 
+#    and $D = (-1)^{s} d$.  We interpret the symbol $\(\frac{D}{p}\)$ 
+#    as 0 if $p\mid 2d$.
+#    (Conway and Sloane, Mass formula paper, p??)
+#
+#    This is possibly equal to  
+#        2^{-td} * \tau(G) *[\prod_{i=1}^{t} \zeta(1-2i) ]* L(1-t, \chi)
+#    where $\dim(Q) = n = 2t$ or $2t+1$, and the last factor is omitted 
+#    when $n$ is odd.
+#    (GHY, Prop 7.4 and 7.5, p121)
+#    """
+#    RR = RealField(200)
+#    n = self.dim()
+#    if n % 2 == 0:
+#        s = n / 2
+#    else:
+#        s = (n-1) / 2
+#
+#    ## Form the generic zeta product
+#    ans = 2 * RR(pi)^(-n * (n+1) / 4)
+#    for j in range(1,n+1):
+#        ans *= gamma(RR(j/2))
+#    for j in range(2, 2*s, 2):  ## j = 2, ..., 2s-2    
+#        ans *= zeta(RR(j))
+#
+#    ## Extra L-factor for even dimensional forms  -- DO THIS!!!
+#    raise NotImplementedError, "This routine is not finished yet... =("
+#
+#    ## Return the answer
+#    return ans
 
 
 
 
 
     
-def conway_p_mass_adjustment(self, p):
-    """
-    Computes the adjustment to give the p-mass from the generic mass.
-    """
-    pass
+#def conway_p_mass_adjustment(self, p):
+#    """
+#    Computes the adjustment to give the p-mass from the generic mass.
+#    """
+#    pass
 
 
 ########################################################################
diff -r 12d1fb4068ef -r 5f887515ed65 sage/quadratic_forms/quadratic_form__mass__Siegel_densities.py
--- a/sage/quadratic_forms/quadratic_form__mass__Siegel_densities.py	Thu May 14 21:06:06 2009 -0700
+++ b/sage/quadratic_forms/quadratic_form__mass__Siegel_densities.py	Fri May 15 04:40:16 2009 -0700
@@ -194,6 +194,17 @@
     Returns the local mass of the quadratic form when p=2, according
     to Watson's Theorem 1 of "The 2-adic density of a quadratic form"
     in Mathematika 23 (1976), pp 94--106.
+
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
+        sage: Q.Watson_mass_at_2()               ## WARNING:  WE NEED TO CHECK THIS CAREFULLY!
+        384
     """
     ## Make a 0-dim'l quadratic form (for initialization purposes)
     Null_Form = copy.deepcopy(self)
@@ -288,6 +299,17 @@
     to Theorem 5.6.3 on pp108--9 of Kitaoka's Book "The Arithmetic of
     Quadratic Forms".
 
+    INPUT:
+        none
+
+    OUTPUT:
+        a rational number > 0
+
+    EXAMPLES:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1]) 
+        sage: Q.Kitaoka_mass_at_2()   ## WARNING:  WE NEED TO CHECK THIS CAREFULLY!
+        1/2    
+
     """
     ## Make a 0-dim'l quadratic form (for initialization purposes)
     Null_Form = copy.deepcopy(self)
@@ -342,7 +364,7 @@
 
             ## Deal with the complicated case:
             tmp_m = dim2_dict[j].dim() / 2
-            if dim2_dict[j].is_hyperbolic():
+            if dim2_dict[j].is_hyperbolic(2):
                 E *= 2 / (1 + 2**(-tmp_m))
             else:
                 E *= 2 / (1 - 2**(-tmp_m)) 
@@ -369,6 +391,7 @@
     ## Step 5: Compute the local mass for the prime 2.
     mass_at_2 = (QQ(2)**(w - q)) * P * E
     return mass_at_2
+
         
         
 def mass_at_two_by_counting_mod_power(self, k):
@@ -376,6 +399,21 @@
     Computes the local mass at p=2 assuming that it's stable (mod 2^k).
 
     Note: This is **way** too slow to be useful, even when k=1!!!
+
+    TO DO: Remove this routine, or try to compile it!
+
+
+    INPUT:
+        k -- an integer >= 1
+
+    OUTPUT:
+        a rational number
+
+    EXAMPLE:
+        sage: Q = DiagonalQuadraticForm(ZZ, [1,1,1])
+        sage: Q.mass_at_two_by_counting_mod_power(1)
+        4    
+
     """
     R = IntegerModRing(2**k)
     Q1 = self.base_change_to(R)
